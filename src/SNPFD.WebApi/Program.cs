using System.Reflection;
using System.Text;
using Microsoft.OpenApi.Models;
using Newtonsoft.Json.Serialization;
using Serilog;
using SNPFD.Application;
using SNPFD.Infrastructure.Repository;
using SNPFD.WebApi.Workers;

var builder = WebApplication.CreateBuilder(args);

// Add services to the container.

builder.Services
    .AddControllers()
    .AddNewtonsoftJson(options =>
        options.SerializerSettings.ContractResolver = new DefaultContractResolver()
        {
            NamingStrategy = new CamelCaseNamingStrategy()
            {
                ProcessDictionaryKeys = true,
            }
        });

// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle
builder.Services.AddEndpointsApiExplorer();

var stringBuilder = new StringBuilder()
    .AppendLine("This application was generated by `Milad Rivandi`.")
    .AppendLine("<br />")
    .AppendLine("Email: miladrivandi73@gmail.com")
    .AppendLine("<br />")
    .AppendLine("Mobile: +989302520691")
    .AppendLine("<br />")
    .AppendLine("Linkedin: https://www.linkedin.com/in/milad-rivandi")
    .AppendLine("<br />")
    .AppendLine("Github: https://github.com/MiladRv")
    .ToString();

builder.Services.AddSwaggerGen(options =>
{
    options.SwaggerDoc("v1", new OpenApiInfo
    {
        Version = "v1",
        Title = "SnappFood Code-Challenge",
        Description = stringBuilder,
        Contact = new OpenApiContact
        {
            Name = "Email",
            Email = "miladrivandi73@gmail.com",
            Url = new Uri("https://github.com/MiladRv")
        },
    });

    // using System.Reflection;
    var xmlFilename = $"{Assembly.GetExecutingAssembly().GetName().Name}.xml";
    options.IncludeXmlComments(Path.Combine(AppContext.BaseDirectory, xmlFilename));
});


builder.Services.RegisterAppServices();

builder.Services.RegisterRepositories();

builder.Host.UseSerilog((context, configuration) => configuration.ReadFrom.Configuration(context.Configuration));

builder.Services.AddHostedService<SeedDataWorker>();

builder.Services.AddRouting(options => options.LowercaseUrls = true);

var app = builder.Build();

// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

app.UseHttpsRedirection();

app.MapControllers();

app.Run();